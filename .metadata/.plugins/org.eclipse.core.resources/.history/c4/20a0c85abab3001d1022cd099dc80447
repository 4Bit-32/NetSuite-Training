/**
 * @NApiVersion 2.x
 * @NScriptType ClientScript
 * @NModuleScope SameAccount
 */
define(['N/record','N/runtime'],
/**
 * @param {record} record
 */
function(record,runtime) {
    
    /**
     * Function to be executed after page is initialized.
     *
     * @param {Object} scriptContext
     * @param {Record} scriptContext.currentRecord - Current form record
     * @param {string} scriptContext.mode - The mode in which the record is being accessed (create, copy, or edit)
     *
     * @since 2015.2
     */
    function pageInit(scriptContext) {
    	
    	try{
    		var currentReco= scriptContext.currentRecord;
    		var userObj = runtime.getCurrentUser();
    	
    		
    		if(scriptContext.mode == 'create')
    			{
    			currentReco.setValue({
    				fieldId: 'name',
    				value: userObj.name,
    				ignoreFieldChange: true
    				});
    			currentReco.setValue({
    				fieldId: 'custrecord_role_name',
    				value: userObj.role,
    				ignoreFieldChange: true
    				});
    			currentReco.setValue({
    				fieldId: 'custrecord_st_name',
    				value: userObj.name,
    				ignoreFieldChange: true
    				});
    		
    			
    			}
    	}
    	catch(e){
    		alert("error"+e)
    	}
    	
    	

    }

    /**
     * Function to be executed when field is changed.
     *
     * @param {Object} scriptContext
     * @param {Record} scriptContext.currentRecord - Current form record
     * @param {string} scriptContext.sublistId - Sublist name
     * @param {string} scriptContext.fieldId - Field name
     * @param {number} scriptContext.lineNum - Line number. Will be undefined if not a sublist or matrix field
     * @param {number} scriptContext.columnNum - Line number. Will be undefined if not a matrix field
     *
     * @since 2015.2
     */
    function fieldChanged(scriptContext) {
    	try{
    		var currentReco= scriptContext.currentRecord;
    		if(scriptContext.fieldId=='custrecord_st_email_id_'){
    			var userMail=currentReco.getValue({
    				fieldId: 'custrecord_st_email_id_'
    			});
    			if(userMail){
    				currentReco.setValue({
    					fieldId: 'custrecord_fax_1',
    					value :userMail,
    					ignoreFieldChange: true    			
    					});
    				if(scriptContext.fieldId=='name'){
    					var nameValue=scriptContext.currentRecord.getValue({
    						fieldId:"name"
    					});
    					alert('name:'+nameValue);
    					if(nameValue){
    						scriptContext.currentRecord.setValue({
    							fieldId:'custrecord_st_name',
    							value:nameValue,
    							ignoreFieldChange:true
    						})
    					}
    					
    				}
    			}
            
    			
    		}
    	}
    	catch(e){
    		alert("Error")
    	}

    }

    /**
     * Function to be executed when field is slaved.
     *
     * @param {Object} scriptContext
     * @param {Record} scriptContext.currentRecord - Current form record
     * @param {string} scriptContext.sublistId - Sublist name
     * @param {string} scriptContext.fieldId - Field name
     *
     * @since 2015.2
     */
    function postSourcing(scriptContext) {

    }

    /**
     * Function to be executed after sublist is inserted, removed, or edited.
     *
     * @param {Object} scriptContext
     * @param {Record} scriptContext.currentRecord - Current form record
     * @param {string} scriptContext.sublistId - Sublist name
     *
     * @since 2015.2
     */
    function sublistChanged(scriptContext) {

    }

    /**
     * Function to be executed after line is selected.
     *
     * @param {Object} scriptContext
     * @param {Record} scriptContext.currentRecord - Current form record
     * @param {string} scriptContext.sublistId - Sublist name
     *
     * @since 2015.2
     */
    function lineInit(scriptContext) {

    }

    /**
     * Validation function to be executed when field is changed.
     *
     * @param {Object} scriptContext
     * @param {Record} scriptContext.currentRecord - Current form record
     * @param {string} scriptContext.sublistId - Sublist name
     * @param {string} scriptContext.fieldId - Field name
     * @param {number} scriptContext.lineNum - Line number. Will be undefined if not a sublist or matrix field
     * @param {number} scriptContext.columnNum - Line number. Will be undefined if not a matrix field
     *
     * @returns {boolean} Return true if field is valid
     *
     * @since 2015.2
     */
    function validateField(scriptContext) {
    	try{

    	       var currentRec = scriptContext.currentRecord;
    	       
    	       
    	       if(currentRec.fieldId==('name'))
    	         {
    	    	   var studentname=currentRec.getvalue('name')
    	    	  
    	    	     if(studentname){
    	    	    	 var regEx = /^[A-Za-z]+$/;
    	    	    	   if(studentname.value.match(regEx))
    	    	    	     {
    	    	    	      return true;
    	    	    	     }
    	    	    	   else
    	    	    	     {
    	    	    	     alert("Please enter letters only.");
    	    	    	     return false;
    	    	    	     }
    	    	     }}
    	          
    	    }catch(e){
    	             alert("Error in field change funtion"+e);
    	        }

    	
    }

    /**
     * Validation function to be executed when sublist line is committed.
     *
     * @param {Object} scriptContext
     * @param {Record} scriptContext.currentRecord - Current form record
     * @param {string} scriptContext.sublistId - Sublist name
     *
     * @returns {boolean} Return true if sublist line is valid
     *
     * @since 2015.2
     */
    function validateLine(scriptContext) {

    }

    /**
     * Validation function to be executed when sublist line is inserted.
     *
     * @param {Object} scriptContext
     * @param {Record} scriptContext.currentRecord - Current form record
     * @param {string} scriptContext.sublistId - Sublist name
     *
     * @returns {boolean} Return true if sublist line is valid
     *
     * @since 2015.2
     */
    function validateInsert(scriptContext) {

    	
}

    /**
     * Validation function to be executed when record is deleted.
     *
     * @param {Object} scriptContext
     * @param {Record} scriptContext.currentRecord - Current form record
     * @param {string} scriptContext.sublistId - Sublist name
     *
     * @returns {boolean} Return true if sublist line is valid
     *
     * @since 2015.2
     */
    function validateDelete(scriptContext) {

    }

    /**
     * Validation function to be executed when record is saved.
     *
     * @param {Object} scriptContext
     * @param {Record} scriptContext.currentRecord - Current form record
     * @returns {boolean} Return true if record is valid
     *
     * @since 2015.2
     */
    function saveRecord(scriptContext) {
    	
    	

    }

    return {
      pageInit: pageInit,
      fieldChanged: fieldChanged,
//        postSourcing: postSourcing,
//        sublistChanged: sublistChanged,
//        lineInit: lineInit,
      validateField: validateField,
//        validateLine: validateLine,
//        validateInsert: validateInsert,
//        validateDelete: validateDelete,
//       saveRecord: saveRecord
    };
    
});
