/**
 * @NApiVersion 2.x
 * @NScriptType MapReduceScript
 * @NModuleScope SameAccount
 */
define(['N/file', 'N/record', 'N/runtime', 'N/search'],
/**
 * @param {file} file
 * @param {record} record
 * @param {runtime} runtime
 * @param {search} search
 */
function(file, record, runtime, search) {
   
    /**
     * Marks the beginning of the Map/Reduce process and generates input data.
     *
     * @typedef {Object} ObjectRef
     * @property {number} id - Internal ID of the record instance
     * @property {string} type - Record type id
     *
     * @return {Array|Object|Search|RecordRef} inputSummary
     * @since 2015.1
     */
    function getInputData() {
    	try{
    	var invoiceSearchObj = search.create({
    		   type: "invoice",
    		   filters:
    		   [
    		      ["type","anyof","CustInvc"], 
    		      "AND", 
    		      ["status","anyof","CustInvc:D"], 
    		      "AND", 
    		      ["name","anyof","25808"], 
    		      "AND", 
    		      ["mainline","is","T"]
    		   ],
    		   columns:
    		   [
    		      search.createColumn({name: "entity", label: "Name"}),
    		      search.createColumn({name: "amountremaining", label: "Amount Remaining"}),
    		      search.createColumn({name: "email", label: "Email"}),
    		      search.createColumn({name: "statusref", label: "Status"}),
    		      search.createColumn({name: "tranid", label: "Document Number"})
    		   ]
    		});
//    	var csvData = " ";
//		   csvData = "ExternalId,Customer Name,Customer Transaction ID,Invoice Amount,Customer Email\n";
//
//  	   var csvFile = file.create({
//			name : 'invoice Data_JA.csv',
//			contents : csvData,
//			folder : 13688,
//			fileType : 'CSV'
//		});
//  	   
    		var searchResultCount = invoiceSearchObj.runPaged().count;
    		log.debug("invoiceSearchObj result count",searchResultCount);
    		invoiceSearchObj.run().each(function(result){
    			invCustName= result.getValue('entity');
    			log.debug('invoiceCustName',invCustName);
    			invRemainAmount= result.getValue('amountremaining');
    			log.debug('invoiceCustName',invRemainAmount);
    			invCustEmail=result.getValue('email');
    			log.debug('invCustEmail',invCustEmail);
    			invStatus=result.getValue('statusref');
    			log.debug('invStatus',invStatus);
    			invDocNumber=result.getValue('tranid');
    			log.debug('invDocNumber',invDocNumber);
    			
    			
    			invDetails.push({
        			
        			'invCustName':invCustName,
        			'invRemainAmount':invRemainAmount,
        			'invCustEmail':invCustEmail,
        			'invStatus':invStatus,
        			'invDocNumber':invDocNumber
        		});

//    			var row = invCustName + ',' + invRemainAmount + ',' + invCustEmail + ',' + invStatus+','+invDocNumber+'\n';
//
//		        csvFile.appendLine({ value: row });
//    		   // .run().each has a limit of 4,000 results
    		   return true;
    		});
    		log.debug('invDetails',invDetails);
    		log.debug('End GetInputData');
    		
    		return invDetails;

//    		var csvFileId = csvFile.save();
//			log.debug("CSV Created ");
    	}
    	catch(e){
    		log.error('Erro in GetInputData',e);
    	}
    		/*
    		invoiceSearchObj.id="customsearch1678920731803";
    		invoiceSearchObj.title="Invoice Search Record For  CSV JA (copy)";
    		var newSearchId = invoiceSearchObj.save();
    		*/
    }

    /**
     * Executes when the map entry point is triggered and applies to each key/value pair.
     *
     * @param {MapSummary} context - Data collection containing the key/value pairs to process through the map stage
     * @since 2015.1
     */
    function map(context) {
    	try{
    	log.debug('In Map Stage');
    	invDetails  =  JSON.parse(context.value);
    	
    	log.debug('invDetails',invDetails);
        var m_invCustName = invDetals.invCustName;
        var m_invRemainAmount = invDetals.invRemainAmount;
        var m_invCustEmail = invDetals.invCustEmail;
        var m_invStatus = invDetals.invStatus;
        var m_invDocNumber = invDetals.invDocNumber;
        
        log.debug('m_invCustName',m_invCustName);
		log.debug('m_invRemainAmount',m_invRemainAmount);
		log.debug('m_invCustEmail',m_invCustEmail);
		log.debug('m_invStatus',m_invStatus);
		log.debug('m_invDocNumber',m_invDocNumber);
             
        context.write({
        	
        	key: m_invCustName,
        	value:{
        		'm_invCustName':m_invCustName,
        		'm_invRemainAmount':m_invRemainAmount,
        		'm_invCustEmail':m_invCustEmail,
        		'm_invStatus':m_invStatus,
        		'm_invDocNumber':m_invDocNumber	
        	}
        
        });
        		
    	}catch(e){
    		log.debug('Error in MAP Stage');
    		
    	}
    }

    /**
     * Executes when the reduce entry point is triggered and applies to each group.
     *
     * @param {ReduceSummary} context - Data collection containing the groups to process through the reduce stage
     * @since 2015.1
     */
    function reduce(context) {
    	
    	invDetails=JSON.parse(context.value);
    	log.debug('invDetails',invDetails);
    	r_key=context.key;
    	log.debug('key',context.r_key);
    	valuesLength=context.values.length;
    	log.debug('value length',valuesLength);
    	
    	var r_custName=invDetails.m_custName;
    	var r_invRemainAmount = invDetails.m_invRemainAmount;
    	var r_CustEmail=invDetails.m_invCustEmail;
    	var r_invStatus=invDetails.m_invStatus;
    	var r_invDocNumber=invDetails.m_invDocNumber;
    	
    	log.debug('r_custName',r_custName);
 		log.debug('r_invRemainAmount',r_invRemainAmount);
 		log.debug('r_CustEmail',r_CustEmail);
 		log.debug('r_invStatus',r_invStatus);
 		log.debug('r_invDocNumber',r_invDocNumber);
 		
 		

    }


    /**
     * Executes when the summarize entry point is triggered and applies to the result set.
     *
     * @param {Summary} summary - Holds statistics regarding the execution of a map/reduce script
     * @since 2015.1
     */
    function summarize(summary) {

    }

    return {
        getInputData: getInputData,
        map: map,
        reduce: reduce,
        summarize: summarize
    };
    
});
