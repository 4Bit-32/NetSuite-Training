/**
 * @NApiVersion 2.x
 * @NScriptType MapReduceScript
 * @NModuleScope SameAccount
 */
define(['N/record', 'N/runtime', 'N/search','N/file'],
/**
 * @param {record} record
 * @param {runtime} runtime
 * @param {search} search
 */
function(record, runtime, search,file) {
   
    /**
     * Marks the beginning of the Map/Reduce process and generates input data.
     *
     * @typedef {Object} ObjectRef
     * @property {number} id - Internal ID of the record instance
     * @property {string} type - Record type id
     *
     * @return {Array|Object|Search|RecordRef} inputSummary
     * @since 2015.1
     */
    function getInputData() {
    	try{
    	var invDetails= [];
    	
    	var invoiceSearchObj = search.load({ id: 'customsearch_inv_s_record_for_csv_ja'});
    	var csvData = " ";
		csvData = "Customer Name,Customer Transaction ID,Invoice Amount,Customer Email\n";

    	var csvFile = file.create({
			name : 'invoice Data_JA.csv',
			contents : csvData,
			folder : 13688,
			fileType : 'CSV'
		});
    		var searchResultCount = invoiceSearchObj.run().getRange(0,10);
    		log.debug("invoiceSearchObj result count",searchResultCount);
    		 for (var i = 0; i < searchResultCount.length; i++){
    			invCustName= searchResultCount[i].getValue('entity');
    			log.debug('invoiceCustName',invCustName);
    			invRemainAmount= searchResultCount[i].getValue('amountremaining');
    			log.debug('invoiceCustName',invRemainAmount);
    			invCustEmail=searchResultCount[i].getValue('email');
    			log.debug('invCustEmail',invCustEmail);
    			invStatus=searchResultCount[i].getValue('statusref');
    			log.debug('invStatus',invStatus);
    			invDocNumber=searchResultCount[i].getValue('tranid');
    			log.debug('invDocNumber',invDocNumber)
    			
    			var row =  invCustName + ',' + invRemainAmount + ',' + invCustEmail + ',' + invStatus+','+invDocNumber+'\n';
    			
		        csvFile.appendLine({ value: row });

    		}
    		var csvFileId = csvFile.save();
			log.debug("file created succesfully");
    		
    	}catch(e){
    		log.error('Error in GetInputData',e);
    	}
    		

    }

    /**
     * Executes when the map entry point is triggered and applies to each key/value pair.
     *
     * @param {MapSummary} context - Data collection containing the key/value pairs to process through the map stage
     * @since 2015.1
     */
    function map(context) {
    	try{
//         
    }
	catch(e){
		log.error('error in map function',e);
	}
         
    }

    /**
     * Executes when the reduce entry point is triggered and applies to each group.
     *
     * @param {ReduceSummary} context - Data collection containing the groups to process through the reduce stage
     * @since 2015.1
     */
    function reduce(context) {
    	try{
//    	
      }
    catch(e){
    	log.debug('error in reduce',e);
    }
   }

    /**
     * Executes when the summarize entry point is triggered and applies to the result set.
     *
     * @param {Summary} summary - Holds statistics regarding the execution of a map/reduce script
     * @since 2015.1
     */
    function summarize(summary) {

    }

    return {
        getInputData: getInputData,
        map: map,
        reduce: reduce,
        summarize: summarize
    };
    
});
