/**
 * @NApiVersion 2.x
 * @NScriptType MapReduceScript
 * @NModuleScope SameAccount
 */
define(['N/file', 'N/record', 'N/runtime', 'N/search'],
/**
 * @param {file} file
 * @param {record} record
 * @param {runtime} runtime
 * @param {search} search
 */
function(file, record, runtime, search) {
   
    /**
     * Marks the beginning of the Map/Reduce process and generates input data.
     *
     * @typedef {Object} ObjectRef
     * @property {number} id - Internal ID of the record instance
     * @property {string} type - Record type id
     *
     * @return {Array|Object|Search|RecordRef} inputSummary
     * @since 2015.1
     */
    function getInputData() {
    	try{
    		log.debug('In getInputData','In getInputData');
    		var folderSearchObj = search.create({
    			   type: "folder",
    			   filters:
    			   [
    			      ["internalid","anyof","13688"]
    			   ],
    			   columns:
    			   [
    			      search.createColumn({
    			         name: "internalid",
    			         join: "file",
    			         label: "File id"
    			      })
    			   ]
    			});

     		var ResultCount = folderSearchObj.runPaged().count;
     		log.debug("folderSearchObj result count",ResultCount);
     		
//     		var fileList = [];
     		var fileId;
     		folderSearchObj.run().each(function(result){
     		   fileId = result.getValue({name: "internalid",join: "file",label: "File Id"});
     		   log.debug('fileId', fileId);
//     		   fileList.push({'fileId' : fileId});
     		   return true;
     		});
//     		log.debug('fileList', fileList);
     		var fileObj = {'fileId' : fileId};
     		log.debug('End of getInputData Stage');
     		return fileObj;

    }
   
    catch(e){
    	log.error("Error in getInputData");
    }
    }
    /**
     * Executes when the map entry point is triggered and applies to each key/value pair.
     *
     * @param {MapSummary} context - Data collection containing the key/value pairs to process through the map stage
     * @since 2015.1
     */
    function map(context) {
    	  try{
    		  
    		log.debug('In Map Stage...')
    		var m_fileId = JSON.parse(context.value);'//here we have only single value is there so we get the value direct in obj'
      		log.debug('m_fileId', m_fileId);
      		
//      		var m_fileId = fileResults.fileId;
//      		log.debug('m_fileId', m_fileId);
      		var fileObj = file.load({
      			id : m_fileId
      		});
      		var fileContent;
      		if(fileObj.size < 10485760){
      			fileContent = fileObj.getContents();
      		}
      		log.debug('fileContent', fileContent);
      		
      		var fileContentSplit = fileContent.split("\r\n");
      		log.debug('fileContentSplit', fileContentSplit);
      		
      		
      	    //here we split header value  from (,). 
      		var fileHeaders = fileContentSplit[0].split(',');
      		log.debug('fileHeaders', fileHeaders);
      		
      		//here we split each row value  from (,). 
      		for(var i =1; i< fileContentSplit.length-1; i++){
      			
      		var fileValues = fileContentSplit[i].split(',');
      		log.debug('fileValues', fileValues);}
      		
            // Here we itrate the value and split from (,).
      		for(var j = 0; j < fileValues.length; j++) {
      			var fileKey;
      			var fileObject = {};
      			var fileRec = fileValues[j].split(',');
      			log.debug('fileRec', fileRec);
      			
      			for(var k = 0; k < fileRec.length; k++) {
      				
      				fileObject[fileHeaders[k]] = fileRec[k];
      			}
      			fileKey = fileRec[1];
      			log.debug('fileKey', fileKey);
      			log.debug('fileObject', fileObject);
      			context.write({
      				key : fileKey,
      				value : fileObject
      			});
      		}
      		
      		

    	  	}catch(e){
    	  		log.error('Error in map',e);
    	  	}

    }

    /**
     * Executes when the reduce entry point is triggered and applies to each group.
     *
     * @param {ReduceSummary} context - Data collection containing the groups to process through the reduce stage
     * @since 2015.1
     */
    function reduce(context) {
    	try{
//    		log.debug('In Reduce Stage', 'In Reduce Stage');
    		
    		var fileRecords = context.values;
    		log.debug('fileRecords', fileRecords);
    		var currentData;
    		for(var data = 0; data < fileRecords.length; data++) {
    			currentData = JSON.parse(fileRecords[data]);
    			log.debug('currentData', currentData);
    			
    			var invRecord = record.create({
    				type : record.Type.INVOICE
    			});
    			
    			invRecord.setValue({
    				fieldId : 'entity',
    				value : currentData.Customer
    			});
    			log.debug('Customer selected');
    			
    			invRecord.setSublistValue({
    			    sublistId: 'item',
    			    fieldId: 'item',
    			    line: 0,
    			    value:currentData.Item
    			});
    			log.debug('Item selected');
    			
    			invRecord.setSublistValue({
    			    sublistId: 'item',
    			    fieldId: 'quantity',
    			    line: 0,
    			    value: currentData.Quantity
    			});
    			log.debug('Quantity described');
    			
    			invRecord.setSublistValue({
    			    sublistId: 'item',
    			    fieldId: 'rate',
    			    line: 0,
    			    value: currentData.Rate
    			});
    			log.debug('Rate described');
    			
    			invRecord.setSublistValue({
    			    sublistId: 'item',
    			    fieldId: 'amount',
    			    line: 0,
    			    value: currentData.Amount
    			});
    			log.debug('Amount calculated');
    			
    			invRecord.setSublistValue({
    			    sublistId: 'item',
    			    fieldId: 'location',
    			    line: 0,
    			    value: currentData.Location
    			});
    			log.debug('Location filled');
    			
    			invRecord.setSublistValue({
    			    sublistId: 'item',
    			    fieldId: 'taxcode',
    			    line: 0,
    			    value: currentData['Tax Code']
    			});
    			log.debug('Tax code selected');
    			
    			log.debug('Line Commited/Added');
    			
//    			invRecord.commitLine({
//    			    sublistId: 'itemcost'
//    			});
    			
    			var invoiceId = invRecord.save();
    			log.debug('Invoice created and Id is', invoiceId);
    			
    		}
    			}

    	
    	catch(e){
    		log.error("Error In Reduce Stage",e)
    	}

    }


    /**
     * Executes when the summarize entry point is triggered and applies to the result set.
     *
     * @param {Summary} summary - Holds statistics regarding the execution of a map/reduce script
     * @since 2015.1
     */
    function summarize(summary) {

    }

    return {
        getInputData: getInputData,
        map: map,
        reduce: reduce,
        summarize: summarize
    };
    
});
